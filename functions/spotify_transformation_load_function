import json
import boto3
from datetime import datetime
from io import StringIO
import pandas as pd


def album(data):
    album_list = []
    for row in data["items"]:
        album_id = row["track"]["album"]["id"]
        name = row["track"]["album"]["name"]
        release_date = row["track"]["album"]["release_date"]
        total_tracks = row["track"]["album"]["total_tracks"]
        artist = row["track"]["album"]["artists"][0]["name"]
        url = row["track"]["album"]["external_urls"]["spotify"]

        album_elements = {
            "album_id": album_id,
            "name": name,
            "release_date": release_date,
            "total_tracks": total_tracks,
            "artist": artist,
            "url": url
        }
        album_list.append(album_elements)
    return album_list


def artist(data):
    artist_list = []
    for row in data["items"]:
        for key, value in row.items():
            if key == "track":
                for artist in value["artists"]:
                    artist_dict = {
                        "artist_id": artist["id"],
                        "artist_name": artist["name"],
                        "external_url": artist["href"]
                    }
                    artist_list.append(artist_dict)
    return artist_list


def songs(data):
    songs_list = []
    for row in data["items"]:
        song_id = row['track']['id']
        song_name = row['track']['name']
        song_duration = row['track']['duration_ms']
        song_url = row['track']['external_urls']['spotify']
        song_popularity = row['track']['popularity']
        song_added = row['added_at']
        album_id = row['track']['album']['id']
        artist_id = row['track']['album']['artists'][0]['id']

        song_element = {
            'song_id': song_id,
            "song_name": song_name,
            "song_duration": song_duration,
            "song_url": song_url,
            "song_popularity": song_popularity,
            "song_added": song_added,
            "album_id": album_id,
            "artist_id": artist_id
        }
        songs_list.append(song_element)
    return songs_list


# Helper function to normalize release_date
def normalize_date(date_str):
    if len(date_str) == 4:   # Only year provided
        return date_str + "-01-01"
    return date_str


def lambda_handler(event, context):
    s3 = boto3.client('s3')
    bucket = 'spotify-etl-project-np'
    key = 'raw_data/to_process/'

    spotify_data = []
    spotify_keys = []

    for file in s3.list_objects(Bucket=bucket, Prefix=key)['Contents']:
        file_key = file['Key']
        if file_key.endswith('.json'):
            response = s3.get_object(Bucket=bucket, Key=file_key)
            content = response['Body']
            json_content = json.loads(content.read())
            spotify_data.append(json_content)
            spotify_keys.append(file_key)

    for data in spotify_data:
        album_list = album(data)
        artist_list = artist(data)
        songs_list = songs(data)

        # Convert to DataFrames
        album_df = pd.DataFrame.from_dict(album_list).drop_duplicates(subset=['album_id'])
        artist_df = pd.DataFrame.from_dict(artist_list).drop_duplicates(subset=['artist_id'])
        song_df = pd.DataFrame.from_dict(songs_list).drop_duplicates(subset=['song_id'])

        # Normalize release_date column
        album_df["release_date"] = album_df["release_date"].apply(normalize_date)
        album_df["release_date"] = pd.to_datetime(album_df["release_date"], errors="coerce")

        # Convert song_added
        song_df["song_added"] = pd.to_datetime(song_df["song_added"], errors="coerce")

        # Save Songs Data back to S3
        song_key = "transformed_data/songs_data/transformed_songs_" + str(datetime.now()) + ".csv"
        song_buffer = StringIO()
        song_df.to_csv(song_buffer, index=False)
        song_content = song_buffer.getvalue()
        s3.put_object(Bucket=bucket, Key=song_key, Body=song_content)

        # Save Album Data back to S3
        album_key = "transformed_data/album_data/transformed_album_" + str(datetime.now()) + ".csv"
        album_buffer = StringIO()
        album_df.to_csv(album_buffer, index=False)
        album_content = album_buffer.getvalue()
        s3.put_object(Bucket=bucket, Key=album_key, Body=album_content)

        # Save Artist Data back to S3
        artist_key = "transformed_data/artist_data/transformed_artist_" + str(datetime.now()) + ".csv"
        artist_buffer = StringIO()
        artist_df.to_csv(artist_buffer, index=False)
        artist_content = artist_buffer.getvalue()
        s3.put_object(Bucket=bucket, Key=artist_key, Body=artist_content)


    s3_resource = boto3.resource('s3')
    for key in spotify_keys:
        copy_source = {
            'Bucket': bucket, 
            'Key': key
            }
        s3_resource.meta.client.copy(copy_source, bucket, 'raw_data/processed_data/' + key.split('/')[-1])
        s3_resource.Object(bucket, key).delete()

    return {"status": "success"}
